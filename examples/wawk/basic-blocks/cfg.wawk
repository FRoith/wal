// Stmt 1: create aliases
BEGIN: {
  alias(fire, TOP.VexRiscv.lastStageIsFiring);
  alias(pc, TOP.VexRiscv.lastStagePc);
  alias(inst, TOP.VexRiscv.lastStageInstruction);
}

// Stmt 2: initialize pc
TOP.clk, fire, !bstart: { bstart = pc; }

// Stmt 3: detect block boundaries
TOP.clk, fire: {
  was_jump = (lasti[6:5] == 3);
  run_into = (starts[pc] && (starts[pc]!=starts[last_pc]));
  if (was_jump || run_into) {
    trans[last_pc, pc] = [last_pc, pc];
    ends[last_pc] = last_pc;
    bstart = pc;
  };
  // save start of block
  starts[pc] = bstart;
  // save current instruction
  last_pc = pc;
  lasti = inst;
}

END: {
  ends[last_pc] = last_pc;

  print("digraph fsm {node [shape=record];");

  for (block, bpc in ends) {
    printf("%d [label=\"start:%8x\\nend:%8x\"];\n", starts[bpc], starts[bpc], bpc);
  };

  for (key, data in trans) {
    printf("%d->%d;\n", starts[data[0]], data[1]);
  };
  print("}");
}
